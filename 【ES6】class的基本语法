ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。
ES6 的class可以看作只是一个语法糖。新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。
类的定义代码如下：
//定义类
class Point {
constructor(x, y) {
this.x = x;
this.y = y;
}
var p = new Point(1, 2);
使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致。
注意，定义“类”的方法的时候，前面不需要加上function这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。

ES6 的类，完全可以看作构造函数的另一种写法。类的数据类型就是函数，类本身就指向构造函数。
class Point {
// ...
}
typeof Point // "function"
Point === Point.prototype.constructor // true

事实上，类的所有方法都定义在类的prototype属性上面。在类的实例上面调用方法，其实就是调用原型上的方法。
class Point {
constructor() {}
toString() {}
toValue() {}
}
// 等同于
Point.prototype = {
constructor() {},
toString() {},
toValue() {},
};
class B {}let b = new B();
b.constructor === B.prototype.constructor // true

类的新方法可以添加在prototype对象上面。Object.assign方法可以很方便地一次向类添加多个方法。
Object.assign(Point.prototype, {
toString(){},
toValue(){}
});

类的内部所有定义的方法，都是不可枚举的。
class Point {
constructor(x, y) {}
toString() {}
}
Object.keys(Point.prototype)
// []
Object.getOwnPropertyNames(Point.prototype)
// ["constructor","toString"]
上面的代码中，toString方法是Point类内部定义的方法，它也是不可枚举的。这一点与 ES5 的行为不一致。

类和模块的内部，默认就是严格模式。只要你的代码写在类或模块之中，就只有严格模式可用。

*************constructor 方法*****************
constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法。
如果没有显式定义，一个空的constructor方法会被默认添加。

constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。

类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。

实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。
//定义类
class Point {
  constructor(x, y) {
  this.x = x;
  this.y = y;
  }
  toString() {
  return '(' + this.x + ', ' + this.y + ')';
  }
}
var point = new Point(2, 3);
point.toString() // (2, 3)
point.hasOwnProperty('x') // true
point.hasOwnProperty('y') // true
point.hasOwnProperty('toString') // false
point.__proto__.hasOwnProperty('toString') // true
值得注意的是：同一个类的实例的原型都是Point.prototype，所以__proto__属性是相等的。
__proto__ 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，
虽然目前很多现代浏览器的 JS 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。
生产环境中，我们可以使用 Object.getPrototypeOf 方法来获取实例对象的原型，然后再来为原型添加方法/属性。
改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。

类不存在变量提升（hoist），ES6 不会把类的声明提升到代码头部，这样就保证了在类的继承关系中，必须保证子类在父类之后定义。
let Foo = class {};
class Bar extends Foo {
}
如果存在class的提升，上面代码就会报错，因为class会被提升到代码头部，而let命令是不提升的，所以导致Bar继承Foo的时候，Foo还没有定义。

*************私有方法和私有属性***************
ES6 没有提供私有方法和私有属性的语法定义，只能通过变通方法模拟实现。
一种做法是在命名上加以区别。比如以_xxxxx格式命名。表示这是一个只限于内部使用的私有方法。
另一种方法就是索性将私有方法移出模块，因为模块内部的所有方法都是对外可见的。
class Widget {
  foo (baz) {
   bar.call(this, baz);
  }
}

function bar(baz) {
  return this.snaf = baz;
}
上面代码中，foo是公有方法，内部调用了bar.call(this, baz)。这使得bar实际上成为了当前模块的私有方法。
还有一种方法是利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值。

*******this 的指向*********
类的方法内部如果含有this，它默认指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。
一个比较简单的解决方法是，在构造方法中绑定this，这样就不会找不到print方法了.
另一种解决方法是使用箭头函数。
还有一种解决方法是使用Proxy，获取方法的时候，自动绑定this。

********Class 的取值函数（getter）和存值函数（setter）************
在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。

********Class 的静态方法**********
如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。
如果在实例上调用静态方法，会抛出一个错误，表示不存在该方法。
如果静态方法包含this关键字，这个this指的是类，而不是实例。
子类继承父类的静态方法也是可以从super对象上调用的。
目前，只有这种写法可行，因为 ES6 明确规定，Class 内部只有静态方法，没有静态属性。

*********new.target 属性**********
ES6 为new命令引入了一个new.target属性，该属性一般用在构造函数之中，返回new命令作用于的那个构造函数。
如果构造函数不是通过new命令调用的，new.target会返回undefined，因此这个属性可以用来确定构造函数是怎么调用的。
Class 内部调用new.target，返回当前 Class。而子类继承父类时，new.target会返回子类。利用这个特点，可以写出不能独立使用、必须继承后才能使用的类。
在函数外部，使用new.target会报错。


