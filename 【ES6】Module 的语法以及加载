ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。
比如，CommonJS 模块就是对象，输入时必须查找对象属性。实质上是加载整个模块。

CommonJS和ES6模块加载的主要区别
【1】 CommonJS模块就是对象，输入时必须查找对象属性。ES6 模块不是对象，而是通过export命令显式指定输出的代码，再通过import命令输入。
【2】 CommonJS的模块加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。
ES6的模块加载称为“编译时加载”或者静态加载，即 ES6 可以在编译时就完成模块加载，效率要比 CommonJS 模块的加载方式高。
由于 ES6 模块是编译时加载，使得静态分析成为可能。
【3】 CommonJS 模块输出的是值的缓存，不存在动态更新。ES6模块输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。
换句话可以理解为，CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。
造成这个差异的原因是：CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。
而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。
【4】 ES6 模块之中，顶层的this指向undefined；CommonJS 模块的顶层this指向当前模块。
其他一些在ES6模块中不存在的变量是：require，module，exports，__filename，__dirname。

ES6的模块自动采用严格模式，尤其需要注意this的限制。ES6 模块之中，顶层的this指向undefined，即不应该在顶层代码使用this。
利用顶层的this等于undefined这个语法点，可以侦测当前代码是否在 ES6 模块之中。

***export命令***
ES6模块中用export关键字输出该变量 
//输出单个变量
export var lastName = 'Jackson';
//export命令后面，使用大括号指定所要输出的一组变量。应该优先考虑使用这种写法。因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。
var firstName = 'Michael';var lastName = 'Jackson';var year = 1958;
export {firstName, lastName, year};

export输出的变量就是本来的名字，但是可以使用as关键字重命名。
export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。所以正确的写法应该是下面这样：
// 写法一
export var m = 1;
// 写法二
var m = 1;
export {m};
// 写法三
var n = 1;
export {n as m};
它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。同样的，function和class的输出，也必须遵守这样的写法。
export命令可以出现在模块的任何位置，只要处于模块顶层就可以。如果处于块级作用域内，就会报错。import命令也是如此。
这是因为处于条件代码块之中，就没法做静态优化了，违背了 ES6 模块的设计初衷。

****import命令****
使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。import命令接受一对大括号，里面指定要从其他模块导入的变量名。
大括号里面的变量名，必须与被导入模块对外接口的名称相同。import命令输入的变量都是只读的，因为它的本质是输入接口。
也就是说，不允许在加载模块的脚本里面，改写接口。但是如果输出的接口是一个对象，可以修改对象属性的值。

一旦修改输出接口的值，其他模块也可以读到改写后的值。这种写法很难查错，建议凡是输入的变量，都当作完全只读，轻易不要改变它的属性。
注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。这种行为的本质是，import命令是编译阶段执行的，在代码运行之前。
由于import是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。所以下面这样的代码就会报错
// 报错
import { 'f' + 'oo' } from 'my_module';
// 报错
let module = 'my_module';
import { foo } from module;
// 报错
if (x === 1) {
import { foo } from 'module1';} else {
import { foo } from 'module2';}

如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。也就是说，import语句是 Singleton 模式。
目前阶段，通过 Babel 转码，CommonJS 模块的require命令和 ES6 模块的import命令，可以写在同一个模块里面，但是最好不要这样做。
因为import在静态解析阶段执行，所以它是一个模块之中最早执行的。

除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。整体加载的写法如下
import * as circle from './circle';
console.log('圆面积：' + circle.area(4));
console.log('圆周长：' + circle.circumference(14));
模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变

****export default 命令****
为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。这时import命令后面，不需要使用大括号。
export default命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此export default命令只能使用一次。
所以，import命令后面才不用加大括号，因为只可能唯一对应export default命令。
正是因为export default命令其实只是输出一个叫做default的变量，所以它后面不能跟变量声明语句。所以有了下面的写法
// 正确
export var a = 1;
// 正确
var a = 1;
export default a;
// 错误
export default var a = 1;

****export 与 import 的复合写法****
如果在一个模块之中，先输入后输出同一个模块，import语句可以与export语句写在一起。
export { foo, bar } from 'my_module';
// 可以简单理解为
import { foo, bar } from 'my_module';
export { foo, bar };
上面代码中，export和import语句可以结合在一起，写成一行。但需要注意的是，写成一行以后，foo和bar实际上并没有被导入当前模块，
只是相当于对外转发了这两个接口，导致当前模块不能直接使用foo和bar。

默认接口的写法如下。
export { default } from 'foo';
具名接口改为默认接口的写法如下。
export { es6 as default } from './someModule';
// 等同于
import { es6 } from './someModule';
export default es6;

*****模块的继承*******
假设有一个circleplus模块，继承了circle模块。
export * from 'circle';
export var e = 2.71828182846;
export default function(x) {
return Math.exp(x);}
上面代码中的export *，表示再输出circle模块的所有属性和方法。export *命令会忽略circle模块的default方法。
然后，上面代码又输出了自定义的e变量和默认方法。

*****跨模块常量*******
ES6中规定，const声明的常量只在当前代码块有效。
如果想设置跨模块的常量（即跨多个文件），或者说一个值要被多个模块共享，可以将const常量定义为一个模块的输出接口


*****module的加载实现*******
默认情况下，浏览器是同步加载 JavaScript 脚本，即渲染引擎遇到<script>标签就会停下来，等到执行完脚本，再继续向下渲染。
如果是外部脚本，还必须加入脚本下载的时间。<script>标签打开defer或async属性，脚本就会异步加载。
defer与async的区别是：defer要等到整个页面在内存中正常渲染结束（DOM 结构完全生成，以及其他脚本执行完成），才会执行；a
sync一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染。一句话，defer是“渲染完再执行”，async是“下载完就执行”。
另外，如果有多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的。

浏览器加载 ES6 模块，也使用<script>标签，但是要加入type="module"属性。
浏览器对于带有type="module"的<script>，都是异步加载，等到整个页面渲染完，再执行模块脚本，默认等同于打开了<script>标签的defer属性。
如果网页有多个<script type="module">，它们会按照在页面出现的顺序依次执行。
<script>标签的async属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。

JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。

***********Node 加载****************
Node 要求 ES6 模块采用.mjs后缀文件名。也就是说，只要脚本文件里面使用import或者export命令，那么就必须采用.mjs后缀名。
require命令不能加载.mjs文件，会报错，只有import命令才可以加载.mjs文件。反过来，.mjs文件里面也不能使用require命令，必须使用import。

在ES6 模块中加载 CommonJS 模块。CommonJS 模块的输出都定义在module.exports这个属性上面。
Node 的import命令加载 CommonJS 模块，Node 会自动将module.exports属性，当作模块的默认输出，即等同于export default xxx。
CommonJS 模块加载 ES6 模块，不能使用require命令，而要使用import()函数。ES6 模块的所有输出接口，会成为输入对象的属性。

**********循环加载***************
“循环加载”（circular dependency）指的是，a脚本的执行依赖b脚本，而b脚本的执行又依赖a脚本。

CommonJS 的一个模块，就是一个脚本文件。require命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。
以后需要用到这个模块的时候，就会到exports属性上面取值。即使再次执行require命令，也不会再次执行该模块，而是到缓存之中取值。
也就是说，CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。
CommonJS 模块的重要特性是加载时执行，即脚本代码在require的时候，就会全部执行。
一旦出现某个模块被"循环加载"，就只输出已经执行的部分，还未执行的部分不会输出。

ES6 处理“循环加载”与 CommonJS 有本质的不同。ES6 模块是动态引用。
如果使用import从一个模块加载变量，那些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。


